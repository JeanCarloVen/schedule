
//Validación de agenda

- La clave es un arreglo del horario díario

- ej. dias_proveedor = ["lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"]
- ej. horarios_proveedor_medios = ["8:00", "8:15", "8:30", "8:45", "9:00" ...]
- ej. horarios_proveedor_cuartos = ["8:00", "8:30", "9:00", "9:30", "10:00" ...]
- ej. horarios_proveedor_enteros = ["8:00", "9:00", "10:00", "11:00", "12:00" ...]

//Validación de ocupacion

El usuario introduce el día y el horario de la cita

-> $fecha_cita
-> $fecha_dia_cita
-> $hora_incial_cita
-> $hora_final_cita


//El sistema va a la base de datos y valida si el día es: 
    1) laborable
    2) hay espacio disponible en el trancurso del día
    3) hay espacio disponible en el horario seleccionado


//Se realiza la consulta a la BDD sobre la disponibilidad, esto devuelve, en JSON.
//Este formato JSON, puede entregar la de la semana entera o simplemente la de día seleccionado
//En la primer versión, será sólo la del día seleccionado.

[
    {
        "id_supplier" : CLP-346,
        "id_service" : PUAS-001,
        "staff" : ["Juan", "Oliver", "Enrique", "Olivia"],
        "working_days" : [mon, tue, wed, thu, fri, sat], 
        "schedule" : ["start_time" : "09:00", "end_time" : "20:00"],      
        "sunday" : [],
        "monday" : [
            { "start_time" : "13:30", "end_time" : "13:30", "lapse_time" : "30" },
            { "start_time" : "13:30", "end_time" : "14:00", "lapse_time" : "30" }
        ],
        "tuesday":[],
        "wednesday" : [],
        "thursday":[],
        "friday":[],
        "saturday":[]
    }
]

Dentro del objeto JSON viene:
    1) dos parámetros: id_supplier, id_service
    2) un arreglo: staff
    3) un objeto: Dia (ej. Monday, tuesday...)
        - horario de trabajo = work_time
        - tiempo disponible = available_time

[
    {
        "id_supplier" : CLP-346,
        "id_service" : PUAS-001,
        "staff" : ["Juan", "Oliver", "Enrique", "Olivia"],
        "date" : "2021-07-18",
        "monday" : {
                "work_time" : ["start_time" : "09:00", "end_time" : "20:00"],
                "available_time" : [
                    {"start_time" : "12:30", "end_time" : "13:30", "lapse_time" : "60"},
                    {"start_time" : "13:30", "end_time" : "14:00", "lapse_time" : "30"}
                ],
            }
    }
    
]

$dia_laborable[] = working_days;
$horario_inicio = start_time;
$duracion_cita = lapse_time;

//Validación de los dias laborables
if($dia_laborable != MON, TUS, WED, THU, FRI, SAT, SUN, MON-FRI, MON-SAT, SUN-FRI )return;

//Validacion del dia laborable
forEach(element in $dia_laborable){
    if($fecha_dia_cita = element){
        //Si se labora ese día
        //Se valida el espacio disponible
        
        //Calculo del tiempo disponible del día, es sumar los lapse_time del dia.
        monday.forEach(totalLapseTime);

        function totalLapseTime(){
            totalLapseTime += monday[2].value;
            
            if($duracion_de_cita < $totalLapseTime){
            //Existe tiempo para atender la cita

                //Validación de hora, se hace un ciclo for para validar el espacio en el día
                for(i=0, i<$horario_maximo_atencion, i++){
                    if($horario_incio != null){
                        
                    }
                }
            }
            else{
                //No se labora ese día
            }
        }
    }
}


if($fecha_dia_cita != $dia_laborable){

}


//Validación de disponibilidad
//ValidateDay(working_day, daySelected)
Primero se tiene que el workingDay esta guardado en la SessiónStore
y al seleccionar el dia se pasa a la función.

Construcción de la función

function ValidateDay(workindDay, daySelected){
    //Comparamos el día seleccionado con el WorkingDay
    daySelected:
        - 0,1,2,3,4,5,6
    workingDay:
        - L,M,M,J,V,S,M,L-V,M-S,V-D

    wd = { "L" : 0,
           "M" : 1,
           "M" : 2,
           "J" : 3,
           "V" : 4,
           "L-V" : 0-4
        }
        
        wd.Monday

 
    Si el día Seleccionado se encuentra dentro de los días de trabajo se procederá a continuar con el proceso, 
    de lo contrario se sale y devuelve alerta de error

    


}



Fase cero: Selects anidados
1) Crear una primera BDD de proveedor y servicios //DONE
2) Se hará el html para seleccionar los dos select anidados //
3) Se cargarán los elementos de acuerdo a la seleccion de cada uno

Fase uno: 
0) Al seleccionar el proveedor 
    - Los servicios del proveedor
1) Se selecciona el servicio 
    - Se cargará los| días hábiles [{L-V} ó {L,M,V} ó {V,S,D}]
2) Se selecciona el día
    - Se cargará la disponibilidad de horario
        Para cargar la disponibilidad de horario
            - Estado Default:
                * Se cargará disponibilida general
            - Estado Seleccion:
                * Se cargará el staff de ese día dependiendo el servicio seleccionado
3) Al clickear Reservar
    - Se mostrará una pantalla con el resumen de los datos previamente seleccionados
    - En caso de estar de acuerdo se hará la reservación
    - En caso contrario regresar a la pantalla anterior, para modificar los parámetros.

Fase dos: 
0) Al

ELIMINAR ELEMENTOS DENTRO DE ARREGLOS MULTIDIMENSIONALES
https://phpsensei.es/eliminar-elementos-duplicados-en-un-array-php/

        
//        //Recorre el arreglo de arreglos y devuelve la disponibilidad por cada Miembro del Staff
//        foreach ($arr[0] as $data){
//            //var_dump($data); //Devuelve los arreglos dentro del arreglo central
//            
//            $datedBooked = $data['dateBooked']; //Día de la cita
//            $start_wd = $data['Start_Wd'];
//            $end_wd = $data['End_Wd'];
//            $dateBookedStart = $data['DateBooked_Start'];
//            $dateBookedEnd = $data['DateBooked_End'];
//            
//            $typeTime = 'isQuarterHour';
//            
//            //Arreglo de tiempo libre por Staff
//            $staff[] =  array( 
//                    "id_staff" => $data['id_staff'],
//                    "Name" => $data['staff_name'],
//                    "Start_wd" => $data['Start_Wd'],
//                    "End_wd" => $data['End_Wd'],
//                    "DateBookedStart" => $data['DateBooked_Start'],
//                    "DateBookedEnd" => $data['DateBooked_End'],
//                    //"Available_Time" => availability($typeTime, $start_wd, $end_wd, $dateBookedStart, $dateBookedEnd)  
//            );
//            
//        }

                //Generación del nuevo registro (union de los arreglos)
//                $tmp['dateBooked'] = $dataCopy[$index]['dateBooked'];
//                $tmp['working_day'] = $dataCopy[$index]['working_day'];
//                $tmp['lapse_time'] = $dataCopy[$index]['lapse_time'];
//                $tmp['id'] = $dataCopy[$index]['id'];
//                $tmp['code_supplier'] = $dataCopy[$index]['code_supplier'];
//                $tmp['supplier_name'] = $dataCopy[$index]['supplier_name'];
//                $tmp['id_staff'] = $dataCopy[$index]['id_staff'];
//                $tmp['staff_name'] = $dataCopy[$index]['staff_name'];
//                $tmp['id_supplier'] = $dataCopy[$index]['id_supplier'];
//                $tmp['id_working_days'] = $dataCopy[$index]['id_working_days'];
//                $tmp['Start_Wd'] = $dataCopy[$index]['Start_Wd'];
//                $tmp['End_Wd'] = $dataCopy[$index]['End_Wd'];

        
        $array = [];
        $index = 1;
        foreach($arr[0] as $matrix){
            $array['id_staff_'.$index] =  $matrix['id_staff'];
            $array['DateBooked_Start'.$index] = $matrix['DateBooked_Start'];
            $array['DateBooked_End'.$index] = $matrix['DateBooked_End'];
            $array['Start_Wd'.$index] = $matrix['Start_Wd'];
            $array['End_Wd'.$index] = $matrix['End_Wd'];
            $index++;
        };
        
        var_dump($array);
        

Function prepareUniquesSchedules($arr){
    //Preparamos los arreglos de cada miembro del Staff
    $index = 0;
    $staff_data = array();
    $dataFix = array();
    $tmp = array();
    $dataCopy = array();
    $schedule_staff_repeat['schedule_staff'] = null;
    //var_dump($arr);
    foreach($arr[0] as $data){
        //Copia de la Respuesta(Arreglos) que vienen de SQL
        //Al ir recorriendo $arr[0] se crea una copía de cada uno de los registros del Staff
        $dataCopy[] = $data;
        
        echo "index {$index}";
        var_dump($dataCopy);
        
        
        //Se crea un arreglo de ID's por cada arreglo que se va reccoriendo, ie. [1,2,3,3,3,4,5]
        $id_Staff[] = $dataCopy[$index]['id_staff'];
        
        var_dump($id_Staff);
        
        //Validación de registros Unicos o Repetidos de Horario
        if(count($id_Staff) !== 1){
            //Validación de repetición del Staff
            if($id_Staff[$index] !== $id_Staff[$index-1]){
                //Cuando es un sólo registro no hace nada y deja la matríz intacta
                echo 'Son Únicos';
                echo "index Unico: {$index}";
                
                //Si existe el arreglo 'schedule_staff' se agrega aquí horarios, sino se crea el arreglo
                
                //Guarda el horario del arreglo "Anterior(index-1)"  DateBooked_Start y End dentro de un arreglo distinto
                $tmp_unique[] = $dataCopy[$index-1]['DateBooked_Start'];
                $tmp_unique[] = $dataCopy[$index-1]['DateBooked_End'];
                var_dump($tmp_unique);
                
                //Elimina elementos repetidos del arreglo temporal
                $tmp_unique = array_keys(array_flip($tmp_unique));
                
                //Introducimos el arreglo temporal dentro de un arreglo con llave 'schedule_staff'
                $schedule_staff_unique['schedule_staff'] = $tmp_unique;
                
                //Inserta el arreglo del horario del staff dentro del dataCopy
                $dataCopy[$index] = array_merge($dataCopy[$index-1], $schedule_staff_unique);
                
                //Quitar los elementos 'DateBooked_Start' y 'DateBooked_End'
                //unset($dataCopy[$index]['DateBooked_Start'], $dataCopy[$index]['DateBooked_End']);
                
                var_dump($dataCopy);
                
            }else{
                //Cuando se encuentran varios registros se juntan en una sola matriz de horarios
                echo 'Hay repetición ';
                echo "index repetición: {$index}";
                //Guarda el horario del arreglo "Anterior(index-1)" y el "Actual(index)"  DateBooked_Start y End dentro de un arreglo temporal                
                $tmp_repeat[] = $dataCopy[$index-1]['DateBooked_Start'];
                $tmp_repeat[] = $dataCopy[$index-1]['DateBooked_End'];
                $tmp_repeat[] = $dataCopy[$index]['DateBooked_Start'];
                $tmp_repeat[] = $dataCopy[$index]['DateBooked_End']; 
                               
                //Elimina elementos repetidos del arreglo temporal
                $tmp_repeat = array_keys(array_flip($tmp_repeat));
                

                //Introducimos el arreglo temporal dentro de un arreglo con llave 'schedule_staff'
                $schedule_staff_repeat['schedule_staff'] = $tmp_repeat;

                //Inserta el arreglo del horario del staff dentro del dataCopy en el arreglo actual
                $dataCopy[$index] = array_merge($dataCopy[$index], $schedule_staff_repeat);

                //Elimina el arreglo anterior, para evitar repeticiones
                unset($dataCopy[$index-1]);
                
                var_dump($dataCopy);
            }

        }
        $index++;
    }; //End Foreach
    
    //regresa el Arreglo con horario único
    return $dataCopy;

};

//Función generadora de horario del staff
Function availability($typeTime, $start_wd, $end_wd, $start, $end){
    //Definición de Variables
    $leisure[] = null;
    $begin_wd = new DateTime($start_wd);
    $finish_wd = new DateTime($end_wd);
    $start_booked = new DateTime($start);
    $end_booked = new DateTime($end);
    //Es necesario agregarle 30 minutos porque al generar los intervalos lo elimina el último registro
    $end_booked = $end_booked->modify('+ 30 minute');
    
    //Intervalo de medias para el horario
    if($typeTime == 'isHalfTime'){
        //Definición del intervalo para los horarios
        $interval = DateInterval::createFromDateString('30minute');
        // Periodo del día de trabajo
        $period_wd = new DatePeriod($begin_wd, $interval, $finish_wd);
        // Periodo de ocupación 
        $period_booked = new DatePeriod($start_booked, $interval, $end_booked);

        //Generación del horario del día considerando el inicio y termino del día laboral
        foreach ($period_wd as $dt) {
            $schedule[] = $dt->format("H:i");
       }
       
       //Generación del intervalo del ocupación
        foreach ($period_booked as $dt) {
            $period[] = $dt->format("H:i");
       }      
    }
    
    //Del horario del miembro del staff se eliminan los periodos de ocupación    
    $leisure = array_diff($schedule, $period);
    
    //Devuelve el horario disponible por miembro del Staff
    return $leisure;
};

el 